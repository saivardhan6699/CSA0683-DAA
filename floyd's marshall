V = 4
INF = float('inf')
def printSolution(dist):
    print("The following matrix shows the shortest distances between every pair of vertices")
    for i in range(V):
        for j in range(V):
            if dist[i][j] == INF:
                print("INF", end=" ")
            else:
                print(f"{dist[i][j]:3}", end=" ")
        print()


def floydWarshall(graph):
    dist = list(map(lambda i: list(map(lambda j: j, i)), graph))
    for k in range(V):
        for i in range(V):
            # Pick all vertices as destination for the above-picked source
            for j in range(V):
                # If vertex k is on the shortest path from i to j, then update the value of dist[i][j]
                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])

    # Print the shortest distance matrix
    printSolution(dist)

# Driver code
if __name__ == "__main__":
    # Let us create the following weighted graph
    #        10
    #   (0)------->(3)
    #    |         /|\
    #  5 |          |
    #    |          | 1
    #   \|/         |
    #   (1)------->(2)
    #        3
    graph = [
        [0, 5, INF, 10],
        [INF, 0, 3, INF],
        [INF, INF, 0, 1],
        [INF, INF, INF, 0]
    ]

    # Print the solution
    floydWarshall(graph)
